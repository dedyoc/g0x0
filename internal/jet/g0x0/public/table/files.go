//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Files = newFilesTable("public", "files", "")

type filesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	Sha256       postgres.ColumnString
	OriginalName postgres.ColumnString
	MimeType     postgres.ColumnString
	FileSize     postgres.ColumnInteger
	UploadIP     postgres.ColumnString
	UserAgent    postgres.ColumnString
	Secret       postgres.ColumnString
	MgmtToken    postgres.ColumnString
	ExpiresAt    postgres.ColumnTimestampz
	Removed      postgres.ColumnBool
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type FilesTable struct {
	filesTable

	EXCLUDED filesTable
}

// AS creates new FilesTable with assigned alias
func (a FilesTable) AS(alias string) *FilesTable {
	return newFilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FilesTable with assigned schema name
func (a FilesTable) FromSchema(schemaName string) *FilesTable {
	return newFilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FilesTable with assigned table prefix
func (a FilesTable) WithPrefix(prefix string) *FilesTable {
	return newFilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FilesTable with assigned table suffix
func (a FilesTable) WithSuffix(suffix string) *FilesTable {
	return newFilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFilesTable(schemaName, tableName, alias string) *FilesTable {
	return &FilesTable{
		filesTable: newFilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newFilesTableImpl("", "excluded", ""),
	}
}

func newFilesTableImpl(schemaName, tableName, alias string) filesTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		Sha256Column       = postgres.StringColumn("sha256")
		OriginalNameColumn = postgres.StringColumn("original_name")
		MimeTypeColumn     = postgres.StringColumn("mime_type")
		FileSizeColumn     = postgres.IntegerColumn("file_size")
		UploadIPColumn     = postgres.StringColumn("upload_ip")
		UserAgentColumn    = postgres.StringColumn("user_agent")
		SecretColumn       = postgres.StringColumn("secret")
		MgmtTokenColumn    = postgres.StringColumn("mgmt_token")
		ExpiresAtColumn    = postgres.TimestampzColumn("expires_at")
		RemovedColumn      = postgres.BoolColumn("removed")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, Sha256Column, OriginalNameColumn, MimeTypeColumn, FileSizeColumn, UploadIPColumn, UserAgentColumn, SecretColumn, MgmtTokenColumn, ExpiresAtColumn, RemovedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{Sha256Column, OriginalNameColumn, MimeTypeColumn, FileSizeColumn, UploadIPColumn, UserAgentColumn, SecretColumn, MgmtTokenColumn, ExpiresAtColumn, RemovedColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns     = postgres.ColumnList{IDColumn, RemovedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return filesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Sha256:       Sha256Column,
		OriginalName: OriginalNameColumn,
		MimeType:     MimeTypeColumn,
		FileSize:     FileSizeColumn,
		UploadIP:     UploadIPColumn,
		UserAgent:    UserAgentColumn,
		Secret:       SecretColumn,
		MgmtToken:    MgmtTokenColumn,
		ExpiresAt:    ExpiresAtColumn,
		Removed:      RemovedColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
